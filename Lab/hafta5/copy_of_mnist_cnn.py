# -*- coding: utf-8 -*-
"""Copy of MNIST CNN

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tniR22-e6exHxJoG3fxnVfuuBEQp5UDI
"""

#gerekli kütüphanelerin çağrılması
from keras import layers
from keras import models

model = models.Sequential()
model.add(layers.Conv2D(32,(3,3), activation="relu",input_shape=(28,28,1))) #girdi katmanı
model.add(layers.MaxPooling2D((2,2)))
model.add(layers.Conv2D(64,(3,3),activation="relu"))
model.add(layers.MaxPooling2D((2,2)))
model.add(layers.Conv2D(64,(3,3),activation="relu"))
model.add(layers.Flatten())
model.add(layers.Dense(64, activation="relu"))
model.add(layers.Dense(10,activation="softmax")) # son katman sınıflandırıcı katmanı. 10 adet sınıf için 10.

model.summary() #oluşturduğumuz model hakkında genel bilgiler.

#MNIST resimlerinin oluşturduğumuz CNN modeli ile sınıflandırılması
#MNIST verisetinin çağrılması
from keras.datasets import mnist
from keras.utils import to_categorical

(eğitim_görüntüleri, eğitim_etiketleri),(test_görüntüleri, test_etiketleri) = mnist.load_data()

#eğtitim görüntülerinin boyutuna bakılması
eğitim_görüntüleri.shape

#eğitim görüntülerinin yeniden boyutlandırılması
eğitim_görüntüleri = eğitim_görüntüleri.reshape(60000,28,28,1)
#değerlerin standarlaştırılması [0,1]
eğitim_görüntüleri = eğitim_görüntüleri.astype("float32") / 255

#test görüntülerinin boyutuna bakılması
test_görüntüleri.shape

#test görüntülerinin yeniden boyutlandırılması
test_görüntüleri = test_görüntüleri.reshape(10000,28,28,1)
#değerlerin standarlaştırılması [0,1]
test_görüntüleri = test_görüntüleri.astype("float32") / 255

#eğitim ve test etiketlerinin kategorileştirilmesi
eğitim_etiketleri = to_categorical(eğitim_etiketleri)
test_etiketleri = to_categorical(test_etiketleri)

#modelin derlenmesi
model.compile(optimizer="rmsprop", loss="categorical_crossentropy", metrics=["accuracy"])

#modelin eğitilmesi
model.fit(eğitim_görüntüleri,eğitim_etiketleri, epochs=5, batch_size=64)

#test verileri ile sistemin test edilmesi
test_kaybı, test_başarımı = model.evaluate(test_görüntüleri, test_etiketleri)

#Kaybın ve başarımın belirlenmesi
print("Sınıflandırma kaybı: ", test_kaybı)
print("Sınıflandırma başarımı ", test_başarımı)